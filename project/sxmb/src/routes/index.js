import { Router } from 'express'
const nodemailer = require('nodemailer')

const router = Router()
const { getTodoList } = require('../controllers/TodoController')
const ControllerUpload  = require('../controllers/UploadController')
const uploadMulter = require('../models/ModelMulter') // khai b√°o middleware multer ·ªü ƒë√¢y

router.get('/', (req, res) => {
  res.json({ message: 'API v1.0' })
})

router.get('/todos', getTodoList)

// upload nhi·ªÅu files v√≠ d·ª• nh∆∞ h√¨nh ·∫£nh c·ªßa s·∫£n ph·∫©m
router.post('/uploadMultiple', uploadMulter.any(), ControllerUpload.uploadMultipleFiles)

// upload single v√≠ d·ª• nh∆∞ avatar...
router.post('/uploadSingle', uploadMulter.single('name'), ControllerUpload.uploadSingleFile)

router.get('/images', ControllerUpload.getImages)


/**
 * Thi·∫øt l·∫≠p b·∫£o m·∫≠t cho gmail ƒë·ªÉ c√≥ th·ªÉ g·ª≠i mail:
 * - Cho ph√©p c√°c ·ª©ng d·ª•ng b·∫£o m·∫≠t th·∫•p truy c·∫≠p: V√¨ b·∫£o m·∫≠t n√™n gmail s·∫Ω m·∫∑c ƒë·ªãnh c√°i n√†y b·ªã t·∫Øt! https://myaccount.google.com/?utm_source=OGB&tab=rk&utm_medium=act  -> Ch·ªçn m·ª•c security: T√¨m ƒë·∫øn m·ª•c Less secure app access -> Turn on
 * - ƒê·∫∑t quy·ªÅn truy c·∫≠p IMAP: V√†o gmail c·ªßa b·∫°n, ch·ªçn n√∫t setting tr√™n g√≥c ph·∫£i m√†n h√¨nh -> ch·ªçn Forwarding and POP/IMAP, t√¨m ƒë·∫øn m·ª•c IMAP access Enable IMAP
 */
router.post('/send-email', async (req, res) => {
  try {
    let senderMail = process.env.GMAIL_USER || 'example@gmail.com'
    const transporter =  nodemailer.createTransport({ // config mail server
      host: process.env.GMAIL_HOST || 'smtp.gmail.com',
      port: process.env.GMAIL_PORT || 465, // 587 l√† m·ªôt c·ªïng ti√™u chu·∫©n v√† ph·ªï bi·∫øn trong giao th·ª©c SMTP
      secure: true, // n·∫øu c√°c b·∫°n d√πng port 465 (smtps) th√¨ ƒë·ªÉ true, c√≤n l·∫°i h√£y ƒë·ªÉ false cho t·∫•t c·∫£ c√°c port kh√°c
      auth: {
          user: senderMail, //T√†i kho·∫£n gmail v·ª´a t·∫°o
          pass: process.env.GMAIL_PASSWORD || 'example' //M·∫≠t kh·∫©u t√†i kho·∫£n gmail v·ª´a t·∫°o
      },
      tls: {        
          rejectUnauthorized: false // do not fail on invalid certs
      }
    })
    let content = ''
    content += `
        <div style="padding: 10px; background-color: #003375">
            <div style="padding: 10px; background-color: white;">
                <h4 style="color: #0085ff">G·ª≠i mail v·ªõi nodemailer v√† express</h4>
                <span style="color: black">ƒê√¢y l√† mail test</span>
            </div>
        </div>`
    const mainOptions = { // thi·∫øt l·∫≠p ƒë·ªëi t∆∞·ª£ng, n·ªôi dung g·ª≠i mail
        from: `"Dev üëª" <${senderMail}>`, // sender address
        to: req.body.mail, // list of receivers
        subject: 'Test Nodemailer',
        html: content // N·ªôi dung html m√¨nh ƒë√£ t·∫°o tr√™n kia :))
    }
    let info = await transporter.sendMail(mainOptions)
    res.json({ message: info })
  } catch (err) { 
    res.json({ message: 'Message fail: ' +  err })
  }
})

module.exports = router
